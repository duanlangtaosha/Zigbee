C51 COMPILER V9.56.0.0   UART                                                              05/27/2017 02:16:03 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Source\uart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Head) DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\uart.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          /*********************************************************************************************************
   2          * Model Name  : 串口驱动模块
   3          * File  Name  : uart.c
   4          * Chip      : STC89C52RC&STC12C5A60S2，注STC89C52不能用1T模式的
   5          * OSC       : 11.0592M
   6          * Made  By    : 断浪淘沙
   7          * Vision      : 1.3
   8          * Discription   : 实现printf和scanf函数重定向到串口1，即支持printf信息到UART1，即该模块支持
   9          *           printf的打印到串口。
  10          *           波特率  :115200
  11          *           晶振  : 11.0592M
  12          * Time      : 2016-8-5
  13          * Copyright (C), 2016-2017, 断浪淘沙 QQ:891650837
  14          *
  15          *********************************************************************************************************/
  16          
  17          #include "uart.h"
  18          #include "intrins.h"
  19          unsigned char xdata __g_uart_buf[UART_BUF_SIZE] = {0};
  20          uint8_t __g_uart_recieve_counter = 0;
  21          void uart_isr() interrupt 4  //中断接收程序
  22          {
  23   1        if(RI) {         /* 判断是否接收完，接收完成后，由硬件置RI位 */
  24   2          RI = 0;
  25   2        
  26   2          /* 这样是有问题的要重新开机一次 */
  27   2          __g_uart_buf[__g_uart_recieve_counter++] = SBUF;
  28   2          
  29   2      //    __g_uart_buf[__g_uart_recieve_counter] = SBUF;
  30   2      //    __g_uart_recieve_counter++;
  31   2      
  32   2          
  33   2          if (__g_uart_recieve_counter >= UART_BUF_SIZE) {
  34   3            __g_uart_recieve_counter = 0;
  35   3          }
  36   2        }
  37   1      }
  38          
  39          
  40          /**
  41          * \brief 串口发送单字节
  42          *
  43          * \param[in] _data : 要发送的数据
  44          *
  45          * \return 无
  46          */
  47          void uart_send_byte (uint8_t _data)
  48          {
  49   1        SBUF = _data; /* 发送数据送缓冲 */
  50   1        while (!TI);    /* 等待发送完成 */
  51   1        TI = 0;
  52   1      }
  53          
  54          /**
C51 COMPILER V9.56.0.0   UART                                                              05/27/2017 02:16:03 PAGE 2   

  55          * \brief 串口接收单字节
  56          *
  57          * \param 无
  58          *
  59          * \return 返回接收的数据
  60          */
  61          //uint8_t uart_get_byte (void)
  62          //{
  63          //  uint8_t c = 0;
  64          
  65          //  while (RI == 0);
  66          //  c = SBUF;
  67          //  RI = 0; 
  68          
  69          //  return c;
  70          //}
  71          
  72          /**
  73          * \brief 串口发送一串字节数据
  74          *
  75          * \param[in] p_buf : 待发送的数据缓存区
  76          * \param[in] len   : 缓存区的大小
  77          *
  78          * \return 无
  79          */
  80          void uart_send_buf (uint8_t *p_buf, uint8_t _len)
  81          {
  82   1        while (_len--) {
  83   2        
  84   2          uart_send_byte (*p_buf++);
  85   2          _nop_();
  86   2          _nop_();
  87   2          _nop_();
  88   2          _nop_();
  89   2          _nop_();
  90   2          _nop_();
  91   2          _nop_();
  92   2          _nop_();
  93   2          _nop_();
  94   2          _nop_();
  95   2          _nop_();
  96   2          _nop_();
  97   2        }
  98   1      }
  99          
 100          
 101          void uart_send_string (uint8_t *s)
 102          {
 103   1      
 104   1          while (*s)              //Check the end of the string
 105   1          {
 106   2              uart_send_byte(*s++);     //Send current char and increment string ptr
 107   2          }
 108   1      }
 109          
 110          /**
 111          * \brief 串口接收数据缓存
 112          *
 113          * \param[in] p_buf : 接收数据缓存区
 114          * \param[in] len   : 缓存区的大小
 115          *
 116          * \retval 1 : 正确
C51 COMPILER V9.56.0.0   UART                                                              05/27/2017 02:16:03 PAGE 3   

 117          *         0 : 错误
 118          */
 119          uint8_t uart_recieve_buf (uint8_t *p_buf, uint8_t _len)
 120          {
 121   1        uint8_t i = 0;
 122   1        if (__g_uart_recieve_counter >= _len) {
 123   2          
 124   2          for( i = 0; i< _len; i++) {
 125   3           p_buf[i] = __g_uart_buf[i];
 126   3          }
 127   2          __g_uart_recieve_counter = 0;
 128   2          
 129   2          return 1;
 130   2        } else {
 131   2          return 0;
 132   2        }
 133   1      }
 134          
 135          /**
 136          * \brief 串口初始化
 137          *
 138          * \param 无
 139          *
 140          * \return 无
 141          */
 142          void uart_init (void)
 143          {
 144   1        
 145   1        SCON = 0x50;  /* 010 1 0000B，工作方式1, 8位UART，波特率可变，允许接收 */
 146   1        TMOD = 0x20;  /* T1工作于方式2 */
 147   1        TCON = 0x40;  /* 定时器1开始计数 */
 148   1      //  TH1 = 250;    /* T1计数初值 */
 149   1      //  TL1 = 250;
 150   1      
 151   1        #if UART_SPEED_X12
 152   1        AUXR = (AUXR | (1 << 6));
 153   1        
 154   1        /* 由于下面是双倍速率所以说，这里BAUD/2;((FCLK/12/32/(BAUD/2)))等于6 */
 155   1        TH1  = TL1 =(-(FCLK / 32 / (BAUD / 2)));    
 156   1        #else     
                
                /* ((FCLK/12/32/BAUD/2))等于1.5 */  
                TH1  = TL1 =(-(FCLK / 12 / 32 / (BAUD / 2)));
                #endif
 161   1        
 162   1        /* SMOD置1,双倍速率 */
 163   1        PCON = 0x80;  
 164   1        RI   = 0;
 165   1        TI   = 0;
 166   1        
 167   1        ES = 1;
 168   1        EA = 1;
 169   1      }
 170          
 171          /**
 172          * \brief 发送数据帧信息
 173          *
 174          * \note  发送的帧信息： D[0](帧头) + D1(温度的整数) +D2(温度小数) + 
 175          *                       D[3](控制和状态量) + D[4](校验和)
 176          *
 177          * \param[in] temp        : 温度量
 178          * \param[in] control_sta : 控制和状态量
C51 COMPILER V9.56.0.0   UART                                                              05/27/2017 02:16:03 PAGE 4   

 179          *
 180          * \return 无
 181          */
 182          void uart_send_frame ( float temp, uint8_t control_sta)
 183          {
 184   1        uint8_t send_frame[5] = {0};
 185   1        
 186   1        /* 帧头 */
 187   1        send_frame[0] = 0xAA;
 188   1        
 189   1        /* 温度的整数 */
 190   1        send_frame[1] = (uint8_t)temp;
 191   1        
 192   1        /* 温度的小数 */
 193   1        send_frame[2] = ((uint16_t)(temp * 10)) % 10;
 194   1        
 195   1        /* 控制或状态信息量 */
 196   1        send_frame[3] = control_sta;
 197   1        
 198   1        /* 校验和 */
 199   1        send_frame[4] = send_frame[0] + send_frame[1] + send_frame[2] + send_frame[3];
 200   1        
 201   1        uart_send_buf(send_frame, 5);
 202   1      }
 203          
 204          /**
 205          * \brief 接收数据帧信息
 206          *
 207          * \note  发送的帧信息： D[0](帧头) + D1(温度的整数) +D2(温度小数) + 
 208          *                       D[3](控制和状态量) + D[4](校验和)
 209          *
 210          * \param[in] temp        : 温度量
 211          * \param[in] control_sta : 控制和状态量
 212          *
 213          * \retval 0 : 错误
 214          *         1 : 正确
 215          */
 216          uint8_t uartf_reciev_frame(float *temp, uint8_t *control_sta)
 217          {
 218   1        uint8_t r_frame[5] = {0};
 219   1        
 220   1        if (uart_recieve_buf (r_frame, 5)) { /* 接收串口帧信息 */
 221   2        
 222   2          if (r_frame[0] == 0xAA) {
 223   3            if (r_frame[4] == (uint8_t)(r_frame[0] + r_frame[1] + r_frame[2] + r_frame[3])) {
 224   4      //        printf("abc\r\n");
 225   4              *temp = r_frame[1] + r_frame[2]/10.0;
 226   4              
 227   4              *control_sta = r_frame[3];
 228   4              
 229   4              return 1;
 230   4            } else {
 231   4              return 0; /* 校验错误 */
 232   4            }
 233   3            
 234   3          } else {
 235   3            return 0;
 236   3          }
 237   2       }
 238   1        return 0;
 239   1      }
 240          /********************************************************************************************************
C51 COMPILER V9.56.0.0   UART                                                              05/27/2017 02:16:03 PAGE 5   

 241          * Discription   : 实现printf和scanf函数重定向到串口1，即支持printf信息到UART1
 242          *           实现重定向，只需要添加2个函数:
 243          *           char putchar(char c);
 244          *           int fgetc(FILE *f);
 245          *           char getchar(void)
 246          *           这个c模块无对应的h文件。
 247          *********************************************************************************************************/
 248          
 249          
 250          ///*
 251          //********************************************************************************************************
             -*
 252          //* 函 数 名: putchar
 253          //* 功能说明: 重定义 putchar 函数， 这样可以使用printf函数从串口1打印输出
 254          //* 形    参: 等待发送的字符
 255          //* 返 回 值: 返回已发送的字符
 256          //********************************************************************************************************
             -*
 257          //*/
 258          //char putchar(char c)
 259          //{
 260          //  /* 发送一个字符 c 到UART1 */
 261          //  uart_send_byte(c);
 262          
 263          //  return (c);
 264          //}
 265          
 266          ///*
 267          //********************************************************************************************************
             -*
 268          //* 函 数 名: getchar
 269          //* 功能说明: 重定义C库中的 getchar 函数,这样可以使用scanff函数从串口1输入数据
 270          //* 形    参: 无
 271          //* 返 回 值: 返回已读到的字符
 272          //********************************************************************************************************
             -*
 273          //*/
 274          //char getchar(void)
 275          //{
 276          //  return uart_get_byte();
 277          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    455    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =     10    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
