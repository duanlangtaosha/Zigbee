C51 COMPILER V9.56.0.0   LCD12864                                                          05/11/2017 12:03:31 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE LCD12864
OBJECT MODULE PLACED IN .\Objects\lcd12864.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE App\lcd12864.c OPTIMIZE(8,SPEED) INCDIR(.\Head) DEBUG OBJECTEXTEND PRINT
                    -(.\Listings\lcd12864.lst) TABS(2) OBJECT(.\Objects\lcd12864.obj)

line level    source

   1          /*******************************************************************************
   2          *                            STC51 MCU Module
   3          *                       ---------------------------
   4          *
   5          * Copyright (c) 2001-2012 duanlantaosha
   6          *
   7          * Chip      : STC89C52RC&STC12C5A60S2
   8          * OSC       : 11.0592M & 12M
   9          * Made  By  : duanlangtaosha
  10          * QQ        : 891650837
  11          * e-mail:   : 891650837@qq.com
  12          *******************************************************************************/
  13          
  14          /**
  15           * \file
  16           * \brief LCD12864 display module
  17           *
  18           * \note 实现汉字的打印，可以用printf函数打印出数字和汉字，也可以用LCD12864_WriteSring
  19           *       支持画图，画点工程，无反白，注:延时不对可以在lcd12864_delayms中修改
  20           *       printf不支持\n\r的换行。
  21           *       支持sprintf把整数和小数转换成字符串输出。如:1.2356可以转换成字符串类型的1.2356
  22           *
  23           *       并行输入输出,支持不连续的IO口赋值（未测试）
  24           *
  25           * \internal
  26           * \par Modification history
  27           * - 1.00 17-05-10  duanlangtaosha, first implementation.
  28           * \endinternal
  29           */
  30          
  31          #include "lcd12864.h"
  32          //#include "dl_stdint.h"
  33          
  34          /**
  35          * \brief LCD12864延时ms级函数
  36          *
  37          * \param[in] c : 延时多少毫秒，最大是一个uint的值
  38          *
  39          * \return 无
  40          */
  41          void lcd12864_delayms (uint c)
  42          {
  43   1          uchar a,b;
  44   1        for (; c > 0; c--) {
  45   2            for(b = 199; b > 0; b--) {
  46   3                for(a = 1; a > 0; a--);
  47   3          }
  48   2        }
  49   1      }
  50          
  51          /**
  52          * \brief LCD12864判忙操作
  53          *
  54          * \param none
C51 COMPILER V9.56.0.0   LCD12864                                                          05/11/2017 12:03:31 PAGE 2   

  55          *
  56          * \retval 0 : 判忙失败，等待超时
  57          *         1 : 判忙成功，此时LCD12864空闲
  58          */
  59          
  60          uchar lcd12864_busy (void)
  61          {
  62   1        uchar i = 0;
  63   1      
  64   1        LCD12864_RS = 0;  /* 选择命令 */
  65   1        LCD12864_RW = 1;  /* 选择读取 */
  66   1      
  67   1        LCD12864_EN = 1;
  68   1        lcd12864_delayms(1);
  69   1      
  70   1      //  while((LCD12864_DATAPORT & 0x80) == 0x80) /* 检测读取到的值 */
  71   1        while((Read_LCD12864_DATAPORT & 0x80) == 0x80) {
  72   2          i++;
  73   2          if(i > 100) {
  74   3            LCD12864_EN = 0;
  75   3            return 0;    /* 超过等待时间返回0表示失败 */
  76   3          }
  77   2        }
  78   1      
  79   1        LCD12864_EN = 0;
  80   1      
  81   1        return 1;
  82   1      }
  83          
  84          /**
  85          * \brief LCD12864写指令操作
  86          *
  87          * \param[in] cmd : 传人相应的指令
  88          *
  89          * \return 无
  90          */
  91          void lcd12864_write_cmd(uchar cmd)
  92          {
  93   1        uchar i;
  94   1        i = 0;
  95   1        while( lcd12864_busy() == 0) {
  96   2          lcd12864_delayms(1);
  97   2          i++;
  98   2          if( i > 100) {
  99   3            return;    /* 超过等待退出 */
 100   3          } 
 101   2        }
 102   1        
 103   1        LCD12864_RS = 0;     /* 选择命令 */
 104   1        LCD12864_RW = 0;     /* 选择写入 */
 105   1        LCD12864_EN = 0;     /* 初始化使能端 */
 106   1      
 107   1      //  LCD12864_DATAPORT = cmd;   /* 放置数据 */
 108   1        Write_LCD12864_DATAPORT(cmd);
 109   1      
 110   1        LCD12864_EN = 1;       /* 写时序 */
 111   1        lcd12864_delayms(5);
 112   1        LCD12864_EN = 0;              
 113   1      }
 114          
 115          /**
 116          * \brief LCD12864写数据操作
C51 COMPILER V9.56.0.0   LCD12864                                                          05/11/2017 12:03:31 PAGE 3   

 117          *
 118          * \param[in] dat : 传人相应的数据
 119          *
 120          * \return 无
 121          */
 122          void lcd12864_write_data(uchar dat)
 123          {
 124   1        uchar i;
 125   1        i = 0;
 126   1        while ( lcd12864_busy() == 0) {
 127   2          lcd12864_delayms(1);
 128   2          i++;
 129   2          if( i > 100) {
 130   3            return;    /* 超过等待退出 */
 131   3          } 
 132   2        }
 133   1      
 134   1        LCD12864_RS = 1;     /* 选择数据 */
 135   1        LCD12864_RW = 0;     /* 选择写入 */
 136   1        LCD12864_EN = 0;     /* 初始化使能端 */
 137   1      
 138   1      //  LCD12864_DATAPORT = dat;   /* 放置数据 */
 139   1        Write_LCD12864_DATAPORT(dat);
 140   1      
 141   1        LCD12864_EN = 1;       /* 写时序 */
 142   1        lcd12864_delayms(5);
 143   1        LCD12864_EN = 0;                    
 144   1      }
 145          
 146          /**
 147          * \brief LCD12864读取数据
 148          *
 149          * \param 无
 150          *
 151          * \return 读取到的数据
 152          */
 153          #ifdef LCD12864_PICTURE
              
              uchar lcd12864_read_data (void)
              {
                uchar i = 0, lcd12864_read_data = 0;
              
                i = 0;
                while ( lcd12864_busy() == 0) {
                  lcd12864_delayms(1);
                  i++;
                  if ( i > 100) {
                    return 0;    /* 超过等待退出 */
                  } 
                }
              
                LCD12864_RS = 1;       /* 选择命令 */
                LCD12864_RW = 1;
                LCD12864_EN = 0;
                lcd12864_delayms(1);  /* 等待 */
              
                LCD12864_EN = 1;
                lcd12864_delayms(1);
                lcd12864_read_data = Read_LCD12864_DATAPORT;
                LCD12864_EN = 0;
              
                return lcd12864_read_data;
C51 COMPILER V9.56.0.0   LCD12864                                                          05/11/2017 12:03:31 PAGE 4   

              }
              
              #endif
 182          
 183          /**
 184          * \brief LCD12864初始化
 185          *
 186          * \param  无
 187          *
 188          * \return 无
 189          */
 190          void lcd12864_init (void)
 191          {
 192   1        LCD12864_PSB = 1;   /* 选择并行输入 */
 193   1        LCD12864_RST = 1;   /* 复位 */
 194   1      
 195   1        lcd12864_write_cmd(0x30);  /* 选择基本指令操作 */
 196   1        lcd12864_write_cmd(0x0c);  /* 显示开，关光标   */
 197   1        lcd12864_write_cmd(0x01);  /* 清除LCD12864的显示内容 */
 198   1      }
 199          
 200          
 201          /**
 202          * \brief LCD12864清屏（在画图模式下）
 203          *
 204          * \note 在画图模式下，LCD12864的01H命令不能清屏，所以要自己写一个清屏函数
 205          *
 206          * \param 无
 207          *
 208          * \return 无
 209          */
 210          #ifdef LCD12864_PICTURE
              
              void lcd12864_clear_screen (void)
              {
                uchar i,j;
              
                lcd12864_write_cmd(0x34);   /*开启拓展指令集 */
              
                for(i = 0; i < 32; i++) {    /* 因为LCD有纵坐标32格所以写三十二次 */
                
                  lcd12864_write_cmd(0x80+i); /* 先写入纵坐标Y的值 */
                  lcd12864_write_cmd(0x80);   /* 再写入横坐标X的值 */
                  for(j=0;j<32;j++) {     /*
                                          /* 横坐标有16位，每位写入两个字节的的数据，也
                                          /* 就写入32次以为当写入两个字节之后横坐标会自
                                          */
                    lcd12864_write_data(0xFF);    /* 动加1，所以就不用再次写入地址了。 */
                  }
                }
              
                lcd12864_write_cmd(0x36);  /* 0x36扩展指令里面打开绘图显示 */
                lcd12864_write_cmd(0x30);  /* 恢复基本指令集 */
              }
              
              #endif
 235          
 236          /**
 237          * \brief LCD12864画点
 238          *
 239          * \param[in] x : x坐标
 240          * \param[in] y : y坐标
C51 COMPILER V9.56.0.0   LCD12864                                                          05/11/2017 12:03:31 PAGE 5   

 241          *
 242          * \return 无
 243          */
 244          #ifdef LCD12864_PICTURE
              
              void lcd12864_drow_point (uchar x, uchar y)
              {
                uint bt = 0, lcd12864_read_data = 0;
                uchar x_adr, y_adr, h_bit, l_bit;
              
                /* --Y轴最大一共64，但是12864分为上半屏和下半屏，超过32就是下半屏了，--*/
                /* --地址得又从零开始了。所以对32求余数，得到Y轴的坐标，然后加上80H的基地址--*/
                y_adr = 0x80 + y % 32;    //计算Y轴的地址 
                
                /* --当Y大于31时是下半屏，X（水平位置的地址）是从88H开始的，而且它是16位一--*/
                /* --个地址，所以对16求模。而上半屏的地址是从80H开始的--*/ 
                if(y > 31) {
                  x_adr = 0x88 + x / 16;  /* 计算X轴的地址 */
                }
                
                else {
                  x_adr = 0x80 + x / 16;
                }
                
                /* --求出X（水平位置），点亮的点是在16位数据里面的哪一个位--*/
                /* --所以对这个数求余数--*/
                bt = 0x8000 >> (x % 16);
              
                lcd12864_write_cmd(0x34);   /* 进入拓展指令集 */
              
                lcd12864_write_cmd(y_adr);    /* 读取数据的时候要先写入所取数据的地址 */
                lcd12864_write_cmd(x_adr);
              
                lcd12864_read_data();     /* 读取的第一个字节不要 */
                lcd12864_read_data = lcd12864_read_data();    /* 从第二个字节开始接收 */
                lcd12864_read_data <<= 8;
                lcd12864_read_data |= lcd12864_read_data();
                bt = bt | lcd12864_read_data;
                h_bit = bt >> 8;
                l_bit = bt;
              
                lcd12864_write_cmd(y_adr);     /* 写入点的时候，从新写入地址，因为地址已经改变 */
                lcd12864_write_cmd(x_adr);
              
                lcd12864_write_data(h_bit);
                lcd12864_write_data(l_bit);
              
                lcd12864_write_cmd(0x36);    /* 开显示 */
                lcd12864_write_cmd(0x30);    /* 关闭绘图指令集   */
              }
              #endif
 292          
 293          
 294          /*******************************************************************************
 295          * 函 数 名         : lcd12864_clear_screen
 296          * 函数功能       : 在画图模式下，LCD12864的01H命令不能清屏，所以要自己写一个清
 297          *                  * 屏函数
 298          * 输    入         : 无
 299          * 输    出         : 无
 300          *******************************************************************************/
 301          
 302          /**
C51 COMPILER V9.56.0.0   LCD12864                                                          05/11/2017 12:03:31 PAGE 6   

 303          * \brief LCD12864画图
 304          *
 305          * \param[in] a : 图片数组的地址
 306          *
 307          * \return 无
 308          */
 309          #ifdef LCD12864_PICTURE
              
              void LCD12864_DrowPic (uchar *a)     
              {
              
                unsigned char i,j;
              
                lcd12864_clear_screen();
              
                lcd12864_write_cmd(0x34);  /* 开启扩展指令集，并关闭画图显示。*/
                for(i=0;i<32;i++) {       /* 因为LCD有纵坐标32格所以写三十二次 */ 
                  lcd12864_write_cmd(0x80+i);   /* 先写入纵坐标Y的值 */
                  lcd12864_write_cmd(0x80);     /* 再写入横坐标X的值 */
                  for(j = 0; j < 16; j++) {   /* 横坐标有16位，每位写入两个字节的的数据，也
                                               * 就写入32次以为当写入两个字节之后横坐标会自
                                               * 动加1，所以就不用再次写入地址了。
                                               */
                    lcd12864_write_data(*a);        
                    a++;
                  }
                }  
                for(i = 0; i < 32; i++) {     /* 因为LCD有纵坐标32格所以写三十二次 */
                
                  
                  lcd12864_write_cmd(0x80+i);     /* 先写入纵坐标Y的值 */
                  lcd12864_write_cmd(0x88);     /* 再写入横坐标X的值 */
                  for(j = 0; j < 16; j++) {   /* 横坐标有16位，每位写入两个字节的的数据，也
                                           * 就写入32次以为当写入两个字节之后横坐标会自
                                           * 动加1，所以就不用再次写入地址了
                                           */
                    
                    lcd12864_write_data(*a);        
                    a++;
                  }
                } 
              
                lcd12864_write_cmd(0x36);    /* 开显示 */
                lcd12864_write_cmd(0x30);    /* 转回基本指令集 */
              }
              
              #endif
 350          
 351          /**
 352          * \brief LCD12864设置窗口
 353          *
 354          * \note 设置在基本指令模式下设置显示坐标。注意：x是设置行，y是设置列
 355          *
 356          * \param[in] x : 行坐标（总共有4行, x = 0, 1, 2, 3）
 357          * \param[in] y : 列坐标
 358          *
 359          * \return 无
 360          */
 361          void lcd12864_set_window(uchar x, uchar y)
 362          {
 363   1        uchar pos = 0;
 364   1      
C51 COMPILER V9.56.0.0   LCD12864                                                          05/11/2017 12:03:31 PAGE 7   

 365   1        /* 第一行的地址是80H */
 366   1        if (x == 0) {
 367   2          x = 0x80;
 368   2        }
 369   1          
 370   1        /* 第二行的地址是90H */
 371   1        else if (x == 1) {
 372   2          x = 0x90; 
 373   2        }
 374   1        
 375   1        /* 第三行的地址是88H */
 376   1        else if (x == 2) {
 377   2          x = 0x88;
 378   2        }
 379   1        
 380   1        else if (x == 3) {
 381   2          x = 0x98;
 382   2        }
 383   1        
 384   1        pos = x + y;
 385   1        lcd12864_write_cmd(pos);
 386   1      }
 387          
 388          /*
 389          *********************************************************************************************************
 390          * 函 数 名: putchar
 391          * 功能说明: 重定义 putchar 函数， 这样可以使用printf函数打印输出到LCD12864
 392          * 形    参: 等待发送的字符
 393          * 返 回 值: 返回已发送的字符
 394          *********************************************************************************************************
 395          */
 396          
 397          /**
 398          * \brief printf函数的重装载，printf后的打印在LCD12864上
 399          *
 400          * \note 重定义 putchar 函数， 这样可以使用printf函数打印输出到LCD12864
 401          *
 402          * \param[in] c : 字符
 403          *
 404          * \return 相应的字符
 405          */
 406          char putchar(char c)
 407          {
 408   1        /* 发送一个字符 c 到UART1 */
 409   1        lcd12864_write_data(c);
 410   1      
 411   1        return (c);
 412   1      }
 413          
 414          /*
 415          *********************************************************************************************************
 416          * 函 数 名: getchar
 417          * 功能说明: 重定义C库中的 getchar 函数,这样可以使用scanff函数从串口输入数据
 418          * 形    参: 无
 419          * 返 回 值: 返回已读到的字符
 420          *********************************************************************************************************
 421          */
 422          //char getchar(void)
 423          //{
 424          //  //return UART_GetByte();
 425          //  return 0;
 426          //}
C51 COMPILER V9.56.0.0   LCD12864                                                          05/11/2017 12:03:31 PAGE 8   

 427          
 428          
 429          /**
 430          * \brief LCD12864写字符串函数
 431          *
 432          * \note 直接写入字符串无需引入数组，如lcd12864_write_string("断浪淘沙");
 433          *
 434          * \param[in] string : 字符串地址
 435          *
 436          * \return 无
 437          */
 438          void lcd12864_write_string (char *string)
 439          {
 440   1        char *p = string;
 441   1        while (*p != '\0') {
 442   2          lcd12864_write_data(*p);
 443   2          p++;
 444   2        }
 445   1      }
 446          
 447          /**
 448          * \brief LCD12864写整数函数
 449          *
 450          * \note 送人一个整数把整数打印到LCD12864
 451          *
 452          * \param[in] value : 送人的整数
 453          *
 454          * \return 无
 455          */
 456          #ifdef LCD12864_WRITE_UINT_STRING
 457          void lcd12864_write_uint_string(unsigned int value )
 458          {
 459   1        char uintbuf[10] = {0};
 460   1        sprintf(uintbuf, "%d", (int)value);
 461   1        lcd12864_write_string(uintbuf);
 462   1      }
 463          #endif
 464          
 465          /*******************************************************************************
 466          * 函 数 名         : LCD12864_WriteFloatString
 467          * 函数功能        : 送人一个Float型的小数打印到LCD12864
 468          * 输    入          : float value
 469          * 输    出          : 无
 470          *******************************************************************************/
 471          
 472          /**
 473          * \brief LCD12864写浮点数函数
 474          *
 475          * \note 送人一个foat型的小数打印到LCD12864
 476          *
 477          * \param[in] value : 送人浮点数
 478          *
 479          * \return 无
 480          */
 481          #ifdef LCD12864_WRITE_FLOAT_STRING
 482          void lcd12864_write_float_string(float value)
 483          {
 484   1        char floatbuf[10] = {0};
 485   1        char *p = floatbuf;
 486   1        sprintf(floatbuf,"%.2f", (float)value);   //取小数点后两位
 487   1        lcd12864_write_string(floatbuf);
 488   1        
C51 COMPILER V9.56.0.0   LCD12864                                                          05/11/2017 12:03:31 PAGE 9   

 489   1      }
 490          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    568    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      33
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
