C51 COMPILER V9.56.0.0   UART                                                              05/24/2017 11:09:50 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE App\uart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Head) DEBUG OBJECTEXTEND PR
                    -INT(.\Listings\uart.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          /*********************************************************************************************************
   2          * Model Name  : 串口驱动模块
   3          * File  Name  : uart.c
   4          * Chip      : STC89C52RC&STC12C5A60S2，注STC89C52不能用1T模式的
   5          * OSC       : 11.0592M
   6          * Made  By    : 断浪淘沙
   7          * Vision      : 1.3
   8          * Discription   : 实现printf和scanf函数重定向到串口1，即支持printf信息到UART1，即该模块支持
   9          *           printf的打印到串口。
  10          *           波特率  :115200
  11          *           晶振  : 11.0592M
  12          * Time      : 2016-8-5
  13          * Copyright (C), 2016-2017, 断浪淘沙 QQ:891650837
  14          *
  15          *********************************************************************************************************/
  16          
  17          #include "uart.h"
*** WARNING C318 IN LINE 17 OF App\uart.c: can't open file 'uart.h'
  18          uint8_t __g_uart_buf[UART_BUF_SIZE] = {0};
*** ERROR C129 IN LINE 18 OF App\uart.c: missing ';' before '__g_uart_buf'
  19          uint8_t __g_uart_recieve_counter = 0;
  20          void uart_isr() interrupt 4  //中断接收程序
  21          {
  22            if(RI) {         /* 判断是否接收完，接收完成后，由硬件置RI位 */
  23              RI = 0;
  24            
  25              /* 这样是有问题的要重新开机一次 */
  26              __g_uart_buf[__g_uart_recieve_counter++] = SBUF;
  27              
  28              __g_uart_buf[__g_uart_recieve_counter] = SBUF;
  29              __g_uart_recieve_counter++;
  30          
  31              
  32              if (__g_uart_recieve_counter >= UART_BUF_SIZE) {
  33                __g_uart_recieve_counter = 0;
  34              }
  35            }
  36          }
  37          
  38          
  39          /**
  40          * \brief 串口发送单字节
  41          *
  42          * \param[in] _data : 要发送的数据
  43          *
  44          * \return 无
  45          */
  46          void uart_send_byte (uint8_t _data)
  47          {
  48            SBUF = _data; /* 发送数据送缓冲 */
  49            while (!(S2CON & 0x02));    /* 等待发送完成 */
  50            TI = 0;
  51            S2CON &= ~0x02;
  52          }
C51 COMPILER V9.56.0.0   UART                                                              05/24/2017 11:09:50 PAGE 2   

  53          
  54          /**
  55          * \brief 串口接收单字节
  56          *
  57          * \param 无
  58          *
  59          * \return 返回接收的数据
  60          */
  61          uint8_t uart_get_byte (void)
  62          {
  63            uint8_t c = 0;
  64          
  65            while (RI == 0);
  66            c = SBUF;
  67            RI = 0; 
  68          
  69            return c;
  70          }
  71          
  72          /**
  73          * \brief 串口发送一串字节数据
  74          *
  75          * \param[in] p_buf : 待发送的数据缓存区
  76          * \param[in] len   : 缓存区的大小
  77          *
  78          * \return 无
  79          */
  80          void uart_send_buf (uint8_t *p_buf, uint8_t _len)
  81          {
  82            while (_len--) {
  83            
  84              uart_send_byte (*p_buf++);
  85            }
  86          }
  87          
  88          /**
  89          * \brief 串口接收数据缓存
  90          *
  91          * \param[in] p_buf : 接收数据缓存区
  92          * \param[in] len   : 缓存区的大小
  93          *
  94          * \retval 1 : 正确
  95          *         0 : 错误
  96          */
  97          uint8_t uart_recieve_buf (uint8_t *p_buf, uint8_t _len)
  98          {
  99            uint8_t i = 0;
 100            if (__g_uart_recieve_counter >= _len) {
 101              
 102              for( i = 0; i< _len; i++) {
 103               p_buf[i] = __g_uart_buf[i];
 104              }
 105              __g_uart_recieve_counter = 0;
 106              
 107              return 1;
 108            } else {
 109              return 0;
 110            }
 111          }
 112          
 113          /**
 114          * \brief 串口初始化
C51 COMPILER V9.56.0.0   UART                                                              05/24/2017 11:09:50 PAGE 3   

 115          *
 116          * \param 无
 117          *
 118          * \return 无
 119          */
 120          void uart_init (void)
 121          {
 122            
 123            SCON = 0x50;  /* 010 1 0000B，工作方式1, 8位UART，波特率可变，允许接收 */
 124            TMOD = 0x20;  /* T1工作于方式2 */
 125            TCON = 0x40;  /* 定时器1开始计数 */
 126            TH1 = 250;    /* T1计数初值 */
 127            TL1 = 250;
 128          
 129            #if UART_SPEED_X12
*** WARNING C322 IN LINE 129 OF App\uart.c: unknown identifier
                AUXR = (AUXR | (1 << 6));
                
                /* 由于下面是双倍速率所以说，这里BAUD/2;((FCLK/12/32/(BAUD/2)))等于6 */
                TH1  = TL1 =(-(FCLK / 32 / (BAUD / 2)));    
                #else     
 135            
 136            /* ((FCLK/12/32/BAUD/2))等于1.5 */  
 137            TH1  = TL1 =(-(FCLK / 12 / 32 / (BAUD / 2)));
 138            #endif
 139            
 140            /* SMOD置1,双倍速率 */
 141            PCON = 0x80;  
 142            RI   = 0;
 143            TI   = 0;
 144            
 145            ES = 1;
 146            EA = 1;
 147          }
 148          
 149          /**
 150          * \brief 发送数据帧信息
 151          *
 152          * \note  发送的帧信息： D[0](帧头) + D1(温度的整数) +D2(温度小数) + 
 153          *                       D[3](控制和状态量) + D[4](校验和)
 154          *
 155          * \param[in] temp        : 温度量
 156          * \param[in] control_sta : 控制和状态量
 157          *
 158          * \return 无
 159          */
 160          void uart_send_frame ( float temp, uint8_t control_sta)
 161          {
 162            uint8_t send_frame[5] = {0};
 163            
 164            /* 帧头 */
 165            send_frame[0] = 0xAA;
 166            
 167            /* 温度的整数 */
 168            send_frame[1] = (uint8_t)temp;
 169            
 170            /* 温度的小数 */
 171            send_frame[2] = ((uint16_t)(temp * 10)) % 10;
 172            
 173            /* 控制或状态信息量 */
 174            send_frame[3] = control_sta;
 175            
C51 COMPILER V9.56.0.0   UART                                                              05/24/2017 11:09:50 PAGE 4   

 176            /* 校验和 */
 177            send_frame[4] = send_frame[0] + send_frame[1] + send_frame[2] + send_frame[3];
 178            
 179            uart_send_buf(send_frame, 5);
 180          }
 181          
 182          /**
 183          * \brief 接收数据帧信息
 184          *
 185          * \note  发送的帧信息： D[0](帧头) + D1(温度的整数) +D2(温度小数) + 
 186          *                       D[3](控制和状态量) + D[4](校验和)
 187          *
 188          * \param[in] temp        : 温度量
 189          * \param[in] control_sta : 控制和状态量
 190          *
 191          * \retval 0 : 错误
 192          *         1 : 正确
 193          */
 194          uint8_t uartf_reciev_frame(float *temp, uint8_t *control_sta)
 195          {
 196            uint8_t r_frame[5] = {0};
 197            
 198            if (uart_recieve_buf (r_frame, 5)) { /* 接收串口帧信息 */
 199            
 200              if (r_frame[0] == 0xAA) {
 201                if (r_frame[4] == (uint8_t)(r_frame[0] + r_frame[1] + r_frame[2] + r_frame[3])) {
 202                  printf("abc\r\n");
 203                  *temp = r_frame[1] + r_frame[2]/10.0;
 204                  
 205                  *control_sta = r_frame[3];
 206                  
 207                  return 1;
 208                } else {
 209                  return 0; /* 校验错误 */
 210                }
 211                
 212              } else {
 213                return 0;
 214              }
 215           }
 216            return 0;
 217          }
 218          /********************************************************************************************************
 219          * Discription   : 实现printf和scanf函数重定向到串口1，即支持printf信息到UART1
 220          *           实现重定向，只需要添加2个函数:
 221          *           char putchar(char c);
 222          *           int fgetc(FILE *f);
 223          *           char getchar(void)
 224          *           这个c模块无对应的h文件。
 225          *********************************************************************************************************/
 226          
 227          
 228          /*
 229          *********************************************************************************************************
 230          * 函 数 名: putchar
 231          * 功能说明: 重定义 putchar 函数， 这样可以使用printf函数从串口1打印输出
 232          * 形    参: 等待发送的字符
 233          * 返 回 值: 返回已发送的字符
 234          *********************************************************************************************************
 235          */
 236          char putchar(char c)
 237          {
C51 COMPILER V9.56.0.0   UART                                                              05/24/2017 11:09:50 PAGE 5   

 238            /* 发送一个字符 c 到UART1 */
 239            uart_send_byte(c);
 240          
 241            return (c);
 242          }
 243          
 244          /*
 245          *********************************************************************************************************
 246          * 函 数 名: getchar
 247          * 功能说明: 重定义C库中的 getchar 函数,这样可以使用scanff函数从串口1输入数据
 248          * 形    参: 无
 249          * 返 回 值: 返回已读到的字符
 250          *********************************************************************************************************
 251          */
 252          char getchar(void)
 253          {
 254            return uart_get_byte();
 255          }

C51 COMPILATION COMPLETE.  2 WARNING(S),  1 ERROR(S)
