C51 COMPILER V9.56.0.0   UART                                                              05/27/2017 01:33:14 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Source\uart.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Head) DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\uart.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          /*********************************************************************************************************
   2          * Model Name  : 串口驱动模块
   3          * File  Name  : uart.c
   4          * Chip      : STC89C52RC&STC12C5A60S2，注STC89C52不能用1T模式的
   5          * OSC       : 11.0592M
   6          * Made  By    : 断浪淘沙
   7          * Vision      : 1.3
   8          * Discription   : 实现printf和scanf函数重定向到串口1，即支持printf信息到UART1，即该模块支持
   9          *           printf的打印到串口。
  10          *           波特率  :115200
  11          *           晶振  : 11.0592M
  12          * Time      : 2016-8-5
  13          * Copyright (C), 2016-2017, 断浪淘沙 QQ:891650837
  14          *
  15          *********************************************************************************************************/
  16          
  17          #include "uart.h"
  18          #include "intrins.h"
  19          //unsigned char xdata __g_uart_buf[UART_BUF_SIZE] = {0};
  20          unsigned char  __g_uart_buf[5] = {0};
  21          uint8_t __g_uart_recieve_counter = 0;
  22          uint8_t g_uart_sta = 0;
  23          
  24          void uart_isr() interrupt 4  //中断接收程序
  25          {
  26   1        static unsigned char frame_head_suc = 0;
  27   1        unsigned char res = 0;
  28   1        if(RI) {         /* 判断是否接收完，接收完成后，由硬件置RI位 */
  29   2          RI = 0;
  30   2      //    __g_uart_buf[__g_uart_recieve_counter++] = SBUF;
  31   2      //    if (__g_uart_recieve_counter >= UART_BUF_SIZE) {
  32   2      //      __g_uart_recieve_counter = 0;
  33   2      //    }
  34   2            res = SBUF;
  35   2            if(!(g_uart_sta & 0x80))
  36   2            {
  37   3              if(!(g_uart_sta & 0x40))
  38   3              {
  39   4                if(res == 0xAA) {
  40   5                  g_uart_sta |= 0x40; 
  41   5                  __g_uart_buf[0] = 0xAA;
  42   5                  g_uart_sta++;
  43   5                } else {
  44   5                  g_uart_sta &= ~0x40;
  45   5                }
  46   4              } else {
  47   4                __g_uart_buf[(g_uart_sta & 0x0F)] = res;
  48   4                g_uart_sta ++;
  49   4                if((g_uart_sta & 0x0F) == 5) {
  50   5                  g_uart_sta |= 0x80;
  51   5                }
  52   4              }
  53   3          
  54   3        }
C51 COMPILER V9.56.0.0   UART                                                              05/27/2017 01:33:14 PAGE 2   

  55   2      }
  56   1      }
*** WARNING C280 IN LINE 26 OF Source\uart.c: 'frame_head_suc': unreferenced local variable
  57          
  58          
  59          /**
  60          * \brief 串口发送单字节
  61          *
  62          * \param[in] _data : 要发送的数据
  63          *
  64          * \return 无
  65          */
  66          void uart_send_byte (uint8_t _data)
  67          {
  68   1        SBUF = _data; /* 发送数据送缓冲 */
  69   1        while (!TI);    /* 等待发送完成 */
  70   1        TI = 0;
  71   1      }
  72          
  73          /**
  74          * \brief 串口接收单字节
  75          *
  76          * \param 无
  77          *
  78          * \return 返回接收的数据
  79          */
  80          //uint8_t uart_get_byte (void)
  81          //{
  82          //  uint8_t c = 0;
  83          
  84          //  while (RI == 0);
  85          //  c = SBUF;
  86          //  RI = 0; 
  87          
  88          //  return c;
  89          //}
  90          
  91          /**
  92          * \brief 串口发送一串字节数据
  93          *
  94          * \param[in] p_buf : 待发送的数据缓存区
  95          * \param[in] len   : 缓存区的大小
  96          *
  97          * \return 无
  98          */
  99          void uart_send_buf (uint8_t *p_buf, uint8_t _len)
 100          {
 101   1        while (_len--) {
 102   2        
 103   2          uart_send_byte (*p_buf++);
 104   2          _nop_();
 105   2          _nop_();
 106   2          _nop_();
 107   2          _nop_();
 108   2          _nop_();
 109   2          _nop_();
 110   2          _nop_();
 111   2          _nop_();
 112   2          _nop_();
 113   2          _nop_();
 114   2          _nop_();
 115   2          _nop_();
C51 COMPILER V9.56.0.0   UART                                                              05/27/2017 01:33:14 PAGE 3   

 116   2        }
 117   1      }
 118          
 119          
 120          void uart_send_string (uint8_t *s)
 121          {
 122   1      
 123   1          while (*s)              //Check the end of the string
 124   1          {
 125   2              uart_send_byte(*s++);     //Send current char and increment string ptr
 126   2          }
 127   1      }
 128          
 129          /**
 130          * \brief 串口接收数据缓存
 131          *
 132          * \param[in] p_buf : 接收数据缓存区
 133          * \param[in] len   : 缓存区的大小
 134          *
 135          * \retval 1 : 正确
 136          *         0 : 错误
 137          */
 138          //uint8_t uart_recieve_buf (uint8_t *p_buf, uint8_t _len)
 139          //{
 140          //  uint8_t i = 0;
 141          //  if (__g_uart_recieve_counter >= _len) {
 142          //    
 143          //    for( i = 0; i< _len; i++) {
 144          //     p_buf[i] = __g_uart_buf[i];
 145          //    }
 146          //    __g_uart_recieve_counter = 0;
 147          //    g_uart_sta = 0;
 148          //    return 1;
 149          //  } else {
 150          //    return 0;
 151          //  }
 152          //}
 153          
 154          /**
 155          * \brief 串口初始化
 156          *
 157          * \param 无
 158          *
 159          * \return 无
 160          */
 161          void uart_init (void)
 162          {
 163   1        
 164   1        SCON = 0x50;  /* 010 1 0000B，工作方式1, 8位UART，波特率可变，允许接收 */
 165   1        TMOD = 0x20;  /* T1工作于方式2 */
 166   1        TCON = 0x40;  /* 定时器1开始计数 */
 167   1      //  TH1 = 250;    /* T1计数初值 */
 168   1      //  TL1 = 250;
 169   1      
 170   1        #if UART_SPEED_X12
 171   1        AUXR = (AUXR | (1 << 6));
 172   1        
 173   1        /* 由于下面是双倍速率所以说，这里BAUD/2;((FCLK/12/32/(BAUD/2)))等于6 */
 174   1        TH1  = TL1 =(-(FCLK / 32 / (BAUD / 2)));    
 175   1        #else     
                
                /* ((FCLK/12/32/BAUD/2))等于1.5 */  
C51 COMPILER V9.56.0.0   UART                                                              05/27/2017 01:33:14 PAGE 4   

                TH1  = TL1 =(-(FCLK / 12 / 32 / (BAUD / 2)));
                #endif
 180   1        
 181   1        /* SMOD置1,双倍速率 */
 182   1        PCON = 0x80;  
 183   1        RI   = 0;
 184   1        TI   = 0;
 185   1        
 186   1        ES = 1;
 187   1        EA = 1;
 188   1      }
 189          
 190          /**
 191          * \brief 发送数据帧信息
 192          *
 193          * \note  发送的帧信息： D[0](帧头) + D1(温度的整数) +D2(温度小数) + 
 194          *                       D[3](控制和状态量) + D[4](校验和)
 195          *
 196          * \param[in] temp        : 温度量
 197          * \param[in] control_sta : 控制和状态量
 198          *
 199          * \return 无
 200          */
 201          void uart_send_frame ( float temp, uint8_t control_sta)
 202          {
 203   1        uint8_t send_frame[5] = {0};
 204   1        
 205   1        /* 帧头 */
 206   1        send_frame[0] = 0xAA;
 207   1        
 208   1        /* 温度的整数 */
 209   1        send_frame[1] = (uint8_t)temp;
 210   1        
 211   1        /* 温度的小数 */
 212   1        send_frame[2] = ((uint16_t)(temp * 10)) % 10;
 213   1        
 214   1        /* 控制或状态信息量 */
 215   1        send_frame[3] = control_sta;
 216   1        
 217   1        /* 校验和 */
 218   1        send_frame[4] = send_frame[0] + send_frame[1] + send_frame[2] + send_frame[3];
 219   1        
 220   1        uart_send_buf(send_frame, 5);
 221   1      }
 222          
 223          /**
 224          * \brief 接收数据帧信息
 225          *
 226          * \note  发送的帧信息： D[0](帧头) + D1(温度的整数) +D2(温度小数) + 
 227          *                       D[3](控制和状态量) + D[4](校验和)
 228          *
 229          * \param[in] temp        : 温度量
 230          * \param[in] control_sta : 控制和状态量
 231          *
 232          * \retval 0 : 错误
 233          *         1 : 正确
 234          *         -1：校验出错
 235          */
 236          int8_t uartf_reciev_frame(float *temp, uint8_t *control_sta)
 237          {
 238   1      
 239   1        uint8_t res = 0;
C51 COMPILER V9.56.0.0   UART                                                              05/27/2017 01:33:14 PAGE 5   

 240   1      
 241   1        if (g_uart_sta & 0x80) {
 242   2          
 243   2          res = __g_uart_buf[0] + __g_uart_buf[1] + __g_uart_buf[2] + __g_uart_buf[3];
 244   2          
 245   2          if (res == __g_uart_buf[4]) {
 246   3            *temp = __g_uart_buf[1] + __g_uart_buf[2]/10.0;
 247   3            *control_sta = __g_uart_buf[3];
 248   3            g_uart_sta = 0;
 249   3            return 1;
 250   3          } else {
 251   3            g_uart_sta = 0; /* 接收到5个字节后，就可以接收下面的了 */
 252   3            return -1;  /* 校验出错 */
 253   3          }
 254   2        }
 255   1          return 0;
 256   1      }
 257          
 258          
 259          
 260          
 261          /********************************************************************************************************
 262          * Discription   : 实现printf和scanf函数重定向到串口1，即支持printf信息到UART1
 263          *           实现重定向，只需要添加2个函数:
 264          *           char putchar(char c);
 265          *           int fgetc(FILE *f);
 266          *           char getchar(void)
 267          *           这个c模块无对应的h文件。
 268          *********************************************************************************************************/
 269          
 270          
 271          ///*
 272          //********************************************************************************************************
             -*
 273          //* 函 数 名: putchar
 274          //* 功能说明: 重定义 putchar 函数， 这样可以使用printf函数从串口1打印输出
 275          //* 形    参: 等待发送的字符
 276          //* 返 回 值: 返回已发送的字符
 277          //********************************************************************************************************
             -*
 278          //*/
 279          //char putchar(char c)
 280          //{
 281          //  /* 发送一个字符 c 到UART1 */
 282          //  uart_send_byte(c);
 283          
 284          //  return (c);
 285          //}
 286          
 287          ///*
 288          //********************************************************************************************************
             -*
 289          //* 函 数 名: getchar
 290          //* 功能说明: 重定义C库中的 getchar 函数,这样可以使用scanff函数从串口1输入数据
 291          //* 形    参: 无
 292          //* 返 回 值: 返回已读到的字符
 293          //********************************************************************************************************
             -*
 294          //*/
 295          //char getchar(void)
 296          //{
 297          //  return uart_get_byte();
C51 COMPILER V9.56.0.0   UART                                                              05/27/2017 01:33:14 PAGE 6   

 298          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    388    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
