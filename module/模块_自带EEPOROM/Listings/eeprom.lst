C51 COMPILER V9.56.0.0   EEPROM                                                            05/28/2017 23:19:25 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE App\eeprom.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Head) DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\eeprom.lst) TABS(2) OBJECT(.\Objects\eeprom.obj)

line level    source

   1          #include "stc12c5a60s2.h"
   2          #include "uart.h"
   3          #include "intrins.h"
   4          
   5          #include "intrins.h"
   6          
   7          
   8          #define CMD_IDLE    0               //Stand-By
   9          #define CMD_READ    1               //unsigned char-Read
  10          #define CMD_PROGRAM 2               //unsigned char-Program
  11          #define CMD_ERASE   3               //Sector-Erase
  12          
  13          /*Define ISP/IAP/EEPROM operation const for IAP_CONTR*/
  14          //#define ENABLE_IAP 0x80           //if SYSCLK<30MHz
  15          //#define ENABLE_IAP 0x81           //if SYSCLK<24MHz
  16          //#define ENABLE_IAP  0x82            //if SYSCLK<20MHz
  17          #define ENABLE_IAP 0x83           //if SYSCLK<12MHz
  18          //#define ENABLE_IAP 0x84           //if SYSCLK<6MHz
  19          //#define ENABLE_IAP 0x85           //if SYSCLK<3MHz
  20          //#define ENABLE_IAP 0x86           //if SYSCLK<2MHz
  21          //#define ENABLE_IAP 0x87           //if SYSCLK<1MHz
  22          
  23          //Start address for STC11/10xx EEPROM
  24          //#define IAP_ADDRESS 0x0400
  25          
  26          /*----------------------------
  27          Disable ISP/IAP/EEPROM function
  28          Make MCU in a safe state
  29          ----------------------------*/
  30          void iap_idle()
  31          {
  32   1          IAP_CONTR = 0;                  //Close IAP function
  33   1          IAP_CMD = 0;                    //Clear command to standby
  34   1          IAP_TRIG = 0;                   //Clear trigger register
  35   1          IAP_ADDRH = 0x80;               //Data ptr point to non-EEPROM area
  36   1          IAP_ADDRL = 0;                  //Clear IAP address to prevent misuse
  37   1      }
  38          
  39          /*----------------------------
  40          Read one byte from ISP/IAP/EEPROM area
  41          Input: addr (ISP/IAP/EEPROM address)
  42          Output:Flash data
  43          ----------------------------*/
  44          unsigned char iap_read_byte(unsigned int addr)
  45          {
  46   1          unsigned char dat;                       //Data buffer
  47   1      
  48   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  49   1          IAP_CMD = CMD_READ;             //Set ISP/IAP/EEPROM READ command
  50   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  51   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  52   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
  53   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
  54   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
C51 COMPILER V9.56.0.0   EEPROM                                                            05/28/2017 23:19:25 PAGE 2   

  55   1          dat = IAP_DATA;                 //Read ISP/IAP/EEPROM data
  56   1          iap_idle();                      //Close ISP/IAP/EEPROM function
  57   1      
  58   1          return dat;                     //Return Flash data
  59   1      }
  60          
  61          /*----------------------------
  62          Program one byte to ISP/IAP/EEPROM area
  63          Input: addr (ISP/IAP/EEPROM address)
  64                 dat (ISP/IAP/EEPROM data)
  65          Output:-
  66          ----------------------------*/
  67          void iap_program_byte(unsigned int addr, unsigned char dat)
  68          {
  69   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  70   1          IAP_CMD = CMD_PROGRAM;          //Set ISP/IAP/EEPROM PROGRAM command
  71   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  72   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  73   1          IAP_DATA = dat;                 //Write ISP/IAP/EEPROM data
  74   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
  75   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
  76   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
  77   1          iap_idle();
  78   1      }
  79          
  80          /*----------------------------
  81          Erase one sector area
  82          Input: addr (ISP/IAP/EEPROM address)
  83          Output:-
  84          ----------------------------*/
  85          
  86          void iap_erase_sector(unsigned int addr)
  87          {
  88   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  89   1          IAP_CMD = CMD_ERASE;            //Set ISP/IAP/EEPROM ERASE command
  90   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  91   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  92   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
  93   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
  94   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
  95   1          iap_idle();
  96   1      }
  97          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     78    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
