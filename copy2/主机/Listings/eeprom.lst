C51 COMPILER V9.56.0.0   EEPROM                                                            05/28/2017 23:43:08 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Source\eeprom.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Head;.\Source\APP\incl
                    -ude) DEBUG OBJECTEXTEND PRINT(.\Listings\eeprom.lst) TABS(2) OBJECT(.\Objects\eeprom.obj)

line level    source

   1          #include "stc12c5a60s2.h"
   2          #include "uart.h"
   3          #include "intrins.h"
   4          
   5          #define CMD_IDLE    0               //Stand-By
   6          #define CMD_READ    1               //unsigned char-Read
   7          #define CMD_PROGRAM 2               //unsigned char-Program
   8          #define CMD_ERASE   3               //Sector-Erase
   9          
  10          /*Define ISP/IAP/EEPROM operation const for IAP_CONTR*/
  11          //#define ENABLE_IAP 0x80           //if SYSCLK<30MHz
  12          //#define ENABLE_IAP 0x81           //if SYSCLK<24MHz
  13          //#define ENABLE_IAP  0x82            //if SYSCLK<20MHz
  14          #define ENABLE_IAP 0x83           //if SYSCLK<12MHz
  15          //#define ENABLE_IAP 0x84           //if SYSCLK<6MHz
  16          //#define ENABLE_IAP 0x85           //if SYSCLK<3MHz
  17          //#define ENABLE_IAP 0x86           //if SYSCLK<2MHz
  18          //#define ENABLE_IAP 0x87           //if SYSCLK<1MHz
  19          
  20          //Start address for STC11/10xx EEPROM
  21          //#define IAP_ADDRESS 0x0400
  22          
  23          /*----------------------------
  24          Disable ISP/IAP/EEPROM function
  25          Make MCU in a safe state
  26          ----------------------------*/
  27          void iap_idle()
  28          {
  29   1          IAP_CONTR = 0;                  //Close IAP function
  30   1          IAP_CMD = 0;                    //Clear command to standby
  31   1          IAP_TRIG = 0;                   //Clear trigger register
  32   1          IAP_ADDRH = 0x80;               //Data ptr point to non-EEPROM area
  33   1          IAP_ADDRL = 0;                  //Clear IAP address to prevent misuse
  34   1      }
  35          
  36          /*----------------------------
  37          Read one byte from ISP/IAP/EEPROM area
  38          Input: addr (ISP/IAP/EEPROM address)
  39          Output:Flash data
  40          ----------------------------*/
  41          unsigned char iap_read_byte(unsigned int addr)
  42          {
  43   1          unsigned char dat;                       //Data buffer
  44   1      
  45   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  46   1          IAP_CMD = CMD_READ;             //Set ISP/IAP/EEPROM READ command
  47   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  48   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  49   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
  50   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
  51   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
  52   1          dat = IAP_DATA;                 //Read ISP/IAP/EEPROM data
  53   1          iap_idle();                      //Close ISP/IAP/EEPROM function
  54   1      
C51 COMPILER V9.56.0.0   EEPROM                                                            05/28/2017 23:43:08 PAGE 2   

  55   1          return dat;                     //Return Flash data
  56   1      }
  57          
  58          /*----------------------------
  59          Program one byte to ISP/IAP/EEPROM area
  60          Input: addr (ISP/IAP/EEPROM address)
  61                 dat (ISP/IAP/EEPROM data)
  62          Output:-
  63          ----------------------------*/
  64          void iap_program_byte(unsigned int addr, unsigned char dat)
  65          {
  66   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  67   1          IAP_CMD = CMD_PROGRAM;          //Set ISP/IAP/EEPROM PROGRAM command
  68   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  69   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  70   1          IAP_DATA = dat;                 //Write ISP/IAP/EEPROM data
  71   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
  72   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
  73   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
  74   1          iap_idle();
  75   1      }
  76          
  77          /*----------------------------
  78          Erase one sector area
  79          Input: addr (ISP/IAP/EEPROM address)
  80          Output:-
  81          ----------------------------*/
  82          
  83          void iap_erase_sector(unsigned int addr)
  84          {
  85   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  86   1          IAP_CMD = CMD_ERASE;            //Set ISP/IAP/EEPROM ERASE command
  87   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  88   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  89   1          IAP_TRIG = 0x5a;                //Send trigger command1 (0x5a)
  90   1          IAP_TRIG = 0xa5;                //Send trigger command2 (0xa5)
  91   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
  92   1          iap_idle();
  93   1      }
  94          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     78    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
